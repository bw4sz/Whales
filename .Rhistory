out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
# Chunk 4
#read data
mdat<-read.csv("InputData/FilteredData.csv",row.names=1)
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#make sure to remove minke whales, should be already gone, but justfor safety
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("131143","131142"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("InputData/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mxy<-b@data
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp)
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
# Chunk 5
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
# Chunk 6
mxy$Month<-factor(mxy$Month,levels=month.name)
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
# Chunk 1
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
library(tidyr)
library(maps)
library(maptools)
library(raster)
#New model to be run, flag turned off if just updating.
newModel<-T
# Chunk 3
#memory function
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(format(utils::object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
# Chunk 4
#read data
mdat<-read.csv("InputData/FilteredData.csv",row.names=1)
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#make sure to remove minke whales, should be already gone, but justfor safety
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("131143","131142"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("InputData/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mxy<-b@data
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp)
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
# Chunk 5
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
# Chunk 6
mxy$Month<-factor(mxy$Month,levels=month.name)
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)  + facet_wrap(~Month,nrow = 2) + scale_color_discrete(guide="none") + labs(x="",y="") + theme(axis.text.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.ticks.x=element_blank())
ggsave("Figures/MonthTracks.jpeg",height=6, width=9)
# Chunk 7
ccamlr<-readShapePoly("InputData/SSMU_2013/CROPCCAMLR.shp")
ccamlr$Unit<-gsub(x=ccamlr$SSMUname,pattern="Antarctic Peninsula ",rep="")
fccamlr<-fortify(ccamlr,region="Unit")
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + geom_polygon(data=fccamlr,aes(x=long,y=lat,group=id),col="black",alpha=0.01)
# Chunk 12
##Time is the beginning of the first point.
step_length=12
sxy<-split(mxy,mxy$Animal)
#time diff function
timed<-function(d,step_length){
d$j[1]<-0
for (x in 2:nrow(d)){
d$j[x]<-as.numeric(difftime(as.POSIXct(d$timestamp[x]),as.POSIXct(d$timestamp[x-1]),units="mins"))/(step_length*60)
}
#Split out track endings
ends<-c(1,which(d$j>1),nrow(d))
for(w in 2:length(ends)){
d[ends[w-1]:ends[w],"Track"]<-w-1
}
#remove tracks that are shorter than three days
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=24) %>% .$Track
d<-d[d$Track %in% track_time,]
#renumber the tracks
d$Track<-as.numeric(as.factor(d$Track))
return(d)
}
sxy<-lapply(sxy,timed,step_length=12)
#Format matrices for jags
mxy<-rbind_all(sxy)
######recode whales
#mxy$Animal<-as.numeric(as.factor(mxy$Animal))
sxy<-split(mxy,list(mxy$Animal,mxy$Track),drop=TRUE)
sxy<-lapply(sxy,function(x){
#How many observations in each step length segment
x$step<-as.numeric(cut(as.POSIXct(x$timestamp),"12 hours"))
return(x)
})
mxy<-rbind_all(sxy)
#refactor animal
mxy$Animal<-as.numeric(as.factor(mxy$Animal))
# Chunk 13
#total number of steps per track/animal
steps_all<-mxy %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
# give each step a label
mxy<-mxy %>% group_by(Animal,Track,step) %>% mutate(jStep=1:n())
#Cast time array
j<-acast(mxy,Animal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
mxy$step<-factor(mxy$step,levels=1:max(steps_all$n))
idx<-melt(table(mxy$Animal,mxy$Track,mxy$step))
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-acast(data=idx,Animal~Track~step)
#month array
mxy$MonthF<-as.numeric(factor(mxy$Month,levels=month.name))
MonthA<-acast(mxy,Animal~Track~step,value.var="MonthF",fun.aggregate = min)
MonthA[!is.finite(MonthA)]<-NA
#Individuals
ind=length(unique(mxy$Animal))
#tracks per indivudal
tracks<-mxy %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps<-acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-melt(mxy,measure.vars=c("x","y"))
obs<-acast(obs,Animal~Track~step~jStep~variable)
# Chunk 14
#Plot
mxy<-mxy %>% arrange(Animal,Track,step,jStep)
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal),group=paste(Animal,Track)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
# Chunk 15
ggplot() +  geom_path(data=oxy,col='blue',aes(x=x,y=y)) +  geom_path(data=mxy,col='red',aes(x=x,y=y),size=2,alpha=0.7)  + facet_wrap(~individual.local.identifier,scales="free",ncol=4)
# Chunk 16
ggplot(data=steps_all,aes(x=n*step_length/24)) + geom_histogram() + labs(x="Days") + ggtitle("Track Length")
ggplot(data=steps_all,aes(x=Track)) + geom_histogram() + labs(x="Subtracks per Animal")
# Chunk 17
# Chunk 18
#source jags file
source("Bayesian/MultiSpecies.R")
#prior cov shape
R <- diag(c(1,1))
data=list(argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,Month=MonthA,Months=max(MonthA,na.rm=T))
#paramters to track
pt<-c("theta","gamma","phi","alpha_mu","state")
if(newModel){
system.time(jagM<-jags.parallel(model.file = "Bayesian/Multi_RW.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=10,n.burnin=0,n.thin=2,DIC=FALSE))
}
camdf<-mdf %>% group_by(Unit,variable) %>% summarize(s=sum(value,na.rm=T)) %>% arrange(s) %>% ungroup() %>% mutate(Behavior=variable) %>% dplyr::select(-variable) %>%  dcast(...~Behavior,value.var="s") %>% arrange(All)
head(mdf)
mdf<-as.data.frame(mksp)
head(mdf)
camdf<-mdf %>% group_by(Unit,variable) %>% summarize(s=sum(value,na.rm=T)) %>% arrange(s) %>% ungroup() %>% mutate(Behavior=variable) %>% dplyr::select(-variable) %>%  dcast(...~Behavior,value.var="s") %>% arrange(All)
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
library(tidyr)
library(maps)
library(maptools)
library(raster)
#New model to be run, flag turned off if just updating.
newModel<-T
load("SingleSpecies.RData")
head(pc)
pc %>% filter(parameter=="phi") %>% ggplot(.,aes(x=value)) + geom_histogram()
pc %>% filter(parameter=="phi") %>% ggplot(.,aes(x=value,col=Behavior)) + geom_histogram()
pc %>% filter(parameter=="phi") %>% ggplot(.,aes(x=value,fill=Behavior)) + geom_histogram()
pc %>% filter(parameter %in% c("state","phi")) %>% spread(parameter,value) %>% head
pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par) %>% spread(parameter,value) %>% head
pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par,-Behavior) %>% spread(parameter,value) %>% head
pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-c(par,Behavior)) %>% spread(parameter,value) %>% head
pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par) %>% spread(parameter,value) %>% head
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par) %>% spread(parameter,value) %>% head
head(a)
table(a$Estimate)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par) %>% spread(parameter,value)
dim(a)
table(a$Estimate)
tail(a)
?spread
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par) %>% select(-Behavior) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(-par) %>% dplyr::select(-Behavior) %>% spread(parameter,value)
head(a)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(Draw,chain,Animal,Track,step) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(Draw,chain,Animal,Track,step,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi"),phi==2) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,.)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,pass)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
pc %>% filter(Animal==1,step %in% 1:5,Track==1) %>% filter(parameter=="state") %>% head
pc %>% filter(Animal==1,step %in% 1:5,Track==1) %>% filter(parameter=="state") %>% head %>% ggplot(aes(x=Draw,y=value,col=chain)) + geom_line() + facet_wrap(~step)
1:5
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state") %>% head %>% ggplot(aes(x=Draw,y=value,col=chain)) + geom_line() + facet_wrap(~step)
a<-pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state")
a$step
table(a$step)
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state") %>% head %>% ggplot(aes(x=Draw,y=value,col=chain)) + geom_line() + facet_wrap(~as.factor(step))
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state") %>% head %>% ggplot(aes(x=Draw,y=value,col=chain)) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state") %>% head %>% ggplot(aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state") %>% head %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="state") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==2) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==2) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 1:10,Track==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
mxy %>% group_by(Animal,Track) %>% summarise(s=length(unique(step)))
pc %>% filter(Animal==1,step %in% 20:30,Track==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25:30,Track==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
pc %>% filter(Animal==1,step %in% 25:30,Track==1) %>% filter(parameter=="state") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=phi,group=paste(Animal,Track)),size=.2)   + theme_inset()+ geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1) + scale_color_continuous(low='red',high="blue",limits=c(0,1))
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color="bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=phi,group=paste(Animal,Track)),size=.2)   + theme_inset()+ geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1) + scale_color_continuous(low='red',high="blue",limits=c(0,1))
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=phi,group=paste(Animal,Track)),size=.2) + geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1) + scale_color_continuous(low='red',high="blue",limits=c(0,1))
hist(rbeta(1e5,1,4))
1/5
pc %>% filter(Animal==1,step %in% 25:30,Track==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25:30,Track==1,Behavior==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25:30,Track==1,Behavior==2) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25:30,Track==1) %>% filter(parameter=="state") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25,Track==1) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25,Track==1,Behavior==2) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
pc %>% filter(Animal==1,step %in% 25,Track==1,Behavior==2) %>% filter(parameter=="phi") %>% summarise(mean(value))
a<-pc %>% filter(Behavior==2) %>% filter(parameter=="phi")
a<-pc %>% filter(parameter=="state")
a<-pc %>% filter(Behavior==2) %>% filter(parameter=="phi")
b<-pc %>% filter(parameter=="state")
head(a)
head(b)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
head(a)
source('~/.active-rstudio-document', echo=TRUE)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value=is.numeric)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value==value)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
head(a)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value==value))
head(a)
table(a$parameter)
head(pc)
table(pc$parameter)
a<-pc %>% filter(parameter %in% c("state","phi"))
table(a$parameter)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value<1)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
ifelse(parameter=='phi',value==2,value<1)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value < 1)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value == 1)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a
a<-pc %>% filter(parameter %in% c("state","phi"))
%>% filter(ifelse(parameter=='phi',value==2,value)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter(ifelse(parameter=='phi',value==2,value)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% mutate(newv=ifelse(parameter=='phi',value==2,value)) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state" & Behavior==2)|parameter=="phi" ) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state" & Behavior==2)|parameter=="phi" )
head(a)
a$parameter
table(a$parameter)
haed(a)
head*a
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state" & Behavior==2))
heada
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state" & Behavior=="2"))
a
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter %in% "state" & Behavior=="2"))
a
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))
head(a)
table(a$parameter)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter(parameter %in% "state" & Behavior=="2")
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter(parameter %in% "state" & Behavior=="1")
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter( Behavior=="1")
a
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter(parameter == "state",Behavior=="1")
a
a<-pc %>% filter(parameter %in% c("state","phi"))
tail(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi")
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(parameter,value)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(key=parameter,value=value)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter)
head(a)
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% filter(Draw==1,chain==1,Animal==1,Track==2,step==2)
a
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% filter(Draw==1,chain==1,Animal==1,Track==1,step==2)
a
a<-pc %>% filter(parameter %in% c("state","phi"))%>% filter((parameter == "state"&value==2)|parameter =="phi") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% filter(Draw==1,chain==1,Animal==1,Track==1,step==20)
a
a<-pc %>% filter(parameter %in% c("state","phi")) %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% filter(Draw==1,chain==1,Animal==1,Track==1,step==20)
a
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter((parameter == "phi"&Behavior==2)|parameter =="state") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% filter(Draw==1,chain==1,Animal==1,Track==1,step==20)
head(a)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter((parameter == "phi"&Behavior==2)|parameter =="state") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% filter(Draw==1,chain==1,Animal==1,Track==1,step==20)%>% spread(key=parameter,value=value)
a
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter((parameter == "phi"&Behavior==2)|parameter =="state") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(key=parameter,value=value)
head(a)
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter((parameter == "phi"&Behavior==2)|parameter =="state") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(key=parameter,value=value)
head(a)
ggplot(a,aes(x=phi,y=state)) + geom_point()
ggplot(a,aes(x=phi,y=state)) + geom_point() + geom_smooth(method.args=list(family="binomial"))
ggplot(a,aes(x=phi,y=state-1)) + geom_point() + geom_smooth(method.args=list(family="binomial"))
pc %>% filter(Animal==1,step %in% 25:30,Track==1) %>% filter(parameter=="state") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
head(a)
ggplot(a,aes(x=phi,col=state-1)) + geom_density()
ggplot(a,aes(x=phi,fill=as.factor(state-1))) + geom_density()
ggplot(a,aes(x=phi,fill=as.factor(state-1))) + geom_density(alpha=0.7)
ggplot(a,aes(x=phi,fill=as.factor(state-1))) + geom_density(alpha=0.7) + labs(fill="Behavior")
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
library(tidyr)
library(maps)
library(maptools)
library(raster)
#New model to be run, flag turned off if just updating.
newModel<-T
load("SingleSpecies.RData")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1)
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color="bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1)
ggplot(a,aes(x=phi,y=state-1)) + geom_point() + geom_smooth(method.args=list(family="binomial"))
a<-pc %>% filter(parameter %in% c("state","phi")) %>% filter((parameter == "phi"&Behavior==2)|parameter =="state") %>% dplyr::select(Draw,chain,Animal,Track,step,value,parameter) %>% spread(key=parameter,value=value)
ggplot(a,aes(x=phi,y=state-1)) + geom_point() + geom_smooth(method.args=list(family="binomial"))
ggplot(a,aes(x=phi,fill=as.factor(state-1))) + geom_density(alpha=0.7) + labs(fill="Behavior")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=ratio,group=Animal),size=.5)   + theme_inset() +scale_color_continuous(low='blue',high='red')
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=ratio,group=Animal),size=.5)  +scale_color_continuous(low='blue',high='red',labels=c("Traveling","Area-restricted Search"))
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=ratio,group=Animal),size=.5)  +scale_color_continuous(low='blue',high='red')
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=ratio,group=Animal),size=.5)  +scale_color_gradient2(low='blue',high='red',midpoint = 0)
pc %>% filter(Animal==1,step %in% 25:30,Track==1,Behavior==2) %>% filter(parameter=="phi") %>% ggplot(.,aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~step)
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)   + theme_inset() + facet_wrap(~individual.local.identifier,scales="free")
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free")
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free") + theme(axix.text.x=element_blank())
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free") + theme_minimal()
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free") + theme(axix.text.x=element_blank())
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free") + theme(text.axis.x=element_blank())
?theme
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free") + theme(axis.text.x=element_blank())
ggplot()+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + facet_wrap(~individual.local.identifier,scales="free") + theme(axis.text.x=element_blank(),axis.text.y=element_blank())
hist(rbeta(1e5,1,4))
hist(rbeta(1e5,1.5,2))
hist(rbeta(1e5,1,4))
hist(rbeta(1e5,1,5))
hist(rbeta(1e5,1,4))
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
library(tidyr)
library(maps)
library(maptools)
library(raster)
#New model to be run, flag turned off if just updating.
newModel<-T
load("SingleSpecies.RData")
#add comparison to priors
todraw<-table(pc$par)[1]
pc$Estimate<-"Posterior"
#add priors
#alpha
a1prior<-data.frame(Draw=1:todraw,par='alpha[1]',value=rnorm(todraw,0,1.67),parameter='alpha_mu',Behavior=1,Estimate="Prior")
a2prior<-data.frame(Draw=1:todraw,par='alpha[2]',value=rnorm(todraw,0,1.67),parameter='alpha_mu',Behavior=2,Estimate="Prior")
gamma2prior<-data.frame(Draw=1:todraw,par='gamma[2]',value=rbeta(todraw,1,4),parameter='gamma',Behavior=2,Estimate="Prior")
gamma1prior<-data.frame(Draw=1:todraw,par='gamma[1]',value=rbeta(todraw,1,4) + runif(todraw,0.5,1),parameter='gamma',Behavior=1,Estimate="Prior")
prs<-rbind_all(list(a1prior,a2prior,gamma1prior,gamma2prior))
prs$Behavior<-as.factor(prs$Behavior)
allp<-rbind_all(list(pc[!pc$parameter %in% c("phi","state"),],prs))
ggplot(allp,aes(x=Behavior,y=value,fill=Estimate)) + geom_violin() + facet_wrap(~parameter,scale="free")
rm(allp)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.label.x=element_blank())
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.labels.x=element_blank())
?theme
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank())
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank())
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=bstate,group=paste(Animal,Track)),size=.2)  + geom_path(data=fccamlr,aes(x=long,y=lat,group=id),col="black",size=1) + mytheme
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal),group=paste(Animal,Track)),size=.5) + scale_color_discrete(guide="none") + mytheme
