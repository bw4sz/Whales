} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-raster::extract(rtraveling,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-raster::extract(rtraveling,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
#raster
rtraveling<-raster(extent(d)*c(1.1,1.1),nrow=100,ncol=100)
#res(rtraveling)<-0.25
#put cellindex number
rtraveling[]<-1:ncell(rtraveling)
sxy<-split(traveling,traveling$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,rtraveling,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-raster::extract(rtraveling,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
rtraveling[]<-NA
for(x in 1:nrow(cellvals)){
rtraveling[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
head(sptracks)
head(sxy)
traveling
haed(mxy)
mxy$state
levels(mxy$state)
levels(mxy$bstate)
ksp<-data.frame(ksp,raster::extract(s,y=ksp))
Traveling
ksp<-data.frame(ksp,raster::extract(s,y=ksp))
mksp<-melt(ksp,measure.vars=names(s))
krill<-read.csv("InputData/CCAMLR_aggregated_catch_C1.csv")
ksp<-SpatialPointsDataFrame(cbind(krill$GridMidpointDegreeLon,krill$GridMidpointHalfDegreeLat),krill)
#get the ccamlr units
kdat<-ksp %over% ccamlr
ksp<-SpatialPointsDataFrame(cbind(krill$GridMidpointDegreeLon,krill$GridMidpointHalfDegreeLat),data.frame(kdat,data.frame(ksp)))
#raster
r<-raster(extent(d)*c(1.1,1.1),nrow=100,ncol=100)
#res(r)<-0.25
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal,drop=T)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-raster::extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r)
plot(r/length(unique(mxy$Animal)))
traveling<-mxy %>% filter(bstate=="Traveling")
foraging<-mxy %>% filter(bstate=="Area-restricted Search")
#raster
rtraveling<-raster(extent(d)*c(1.1,1.1),nrow=100,ncol=100)
#res(rtraveling)<-0.25
#put cellindex number
rtraveling[]<-1:ncell(rtraveling)
sxy<-split(traveling,traveling$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,rtraveling,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-raster::extract(rtraveling,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
rtraveling[]<-NA
for(x in 1:nrow(cellvals)){
rtraveling[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(rtraveling/length(unique(traveling$Animal)))
plot(rtraveling)
#raster
rforaging<-raster(extent(d)*c(1.1,1.1),nrow=100,ncol=100)
#res(r)<-0.25
#put cellindex number
rforaging[]<-1:ncell(rforaging)
sxy<-split(foraging,foraging$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-raster::extract(rforaging,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
rforaging[]<-NA
for(x in 1:nrow(cellvals)){
rforaging[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r/length(unique(foraging$Animal)))
map(add=T)
sxy
foraging
foraging
head(mxy)
# Chunk 1
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
library(tidyr)
library(maps)
library(maptools)
library(raster)
#New model to be run, flag turned off if just updating.
newModel<-T
# Chunk 3
#memory function
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(format(utils::object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
# Chunk 4
#read data
mdat<-read.csv("InputData/FilteredData.csv",row.names=1)
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#make sure to remove minke whales, should be already gone, but justfor safety
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("131143","131142"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("InputData/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mxy<-b@data
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp)
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
# Chunk 5
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
# Chunk 6
mxy$Month<-factor(mxy$Month,levels=month.name)
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
# Chunk 1
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
library(tidyr)
library(maps)
library(maptools)
library(raster)
#New model to be run, flag turned off if just updating.
newModel<-T
# Chunk 3
#memory function
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(format(utils::object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
# Chunk 4
#read data
mdat<-read.csv("InputData/FilteredData.csv",row.names=1)
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#make sure to remove minke whales, should be already gone, but justfor safety
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("131143","131142"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("InputData/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mxy<-b@data
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp)
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
# Chunk 5
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
# Chunk 6
mxy$Month<-factor(mxy$Month,levels=month.name)
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)  + facet_wrap(~Month,nrow = 2) + scale_color_discrete(guide="none") + labs(x="",y="") + theme(axis.text.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.ticks.x=element_blank())
ggsave("Figures/MonthTracks.jpeg",height=6, width=9)
# Chunk 7
ccamlr<-readShapePoly("InputData/SSMU_2013/CROPCCAMLR.shp")
ccamlr$Unit<-gsub(x=ccamlr$SSMUname,pattern="Antarctic Peninsula ",rep="")
fccamlr<-fortify(ccamlr,region="Unit")
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + geom_polygon(data=fccamlr,aes(x=long,y=lat,group=id),col="black",alpha=0.01)
# Chunk 12
##Time is the beginning of the first point.
step_length=12
sxy<-split(mxy,mxy$Animal)
#time diff function
timed<-function(d,step_length){
d$j[1]<-0
for (x in 2:nrow(d)){
d$j[x]<-as.numeric(difftime(as.POSIXct(d$timestamp[x]),as.POSIXct(d$timestamp[x-1]),units="mins"))/(step_length*60)
}
#Split out track endings
ends<-c(1,which(d$j>1),nrow(d))
for(w in 2:length(ends)){
d[ends[w-1]:ends[w],"Track"]<-w-1
}
#remove tracks that are shorter than three days
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=24) %>% .$Track
d<-d[d$Track %in% track_time,]
#renumber the tracks
d$Track<-as.numeric(as.factor(d$Track))
return(d)
}
sxy<-lapply(sxy,timed,step_length=12)
#Format matrices for jags
mxy<-rbind_all(sxy)
######recode whales
#mxy$Animal<-as.numeric(as.factor(mxy$Animal))
sxy<-split(mxy,list(mxy$Animal,mxy$Track),drop=TRUE)
sxy<-lapply(sxy,function(x){
#How many observations in each step length segment
x$step<-as.numeric(cut(as.POSIXct(x$timestamp),"12 hours"))
return(x)
})
mxy<-rbind_all(sxy)
#refactor animal
mxy$Animal<-as.numeric(as.factor(mxy$Animal))
# Chunk 13
#total number of steps per track/animal
steps_all<-mxy %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
# give each step a label
mxy<-mxy %>% group_by(Animal,Track,step) %>% mutate(jStep=1:n())
#Cast time array
j<-acast(mxy,Animal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
mxy$step<-factor(mxy$step,levels=1:max(steps_all$n))
idx<-melt(table(mxy$Animal,mxy$Track,mxy$step))
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-acast(data=idx,Animal~Track~step)
#month array
mxy$MonthF<-as.numeric(factor(mxy$Month,levels=month.name))
MonthA<-acast(mxy,Animal~Track~step,value.var="MonthF",fun.aggregate = min)
MonthA[!is.finite(MonthA)]<-NA
#Individuals
ind=length(unique(mxy$Animal))
#tracks per indivudal
tracks<-mxy %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps<-acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-melt(mxy,measure.vars=c("x","y"))
obs<-acast(obs,Animal~Track~step~jStep~variable)
# Chunk 14
#Plot
mxy<-mxy %>% arrange(Animal,Track,step,jStep)
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal),group=paste(Animal,Track)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
# Chunk 15
ggplot() +  geom_path(data=oxy,col='blue',aes(x=x,y=y)) +  geom_path(data=mxy,col='red',aes(x=x,y=y),size=2,alpha=0.7)  + facet_wrap(~individual.local.identifier,scales="free",ncol=4)
# Chunk 16
ggplot(data=steps_all,aes(x=n*step_length/24)) + geom_histogram() + labs(x="Days") + ggtitle("Track Length")
ggplot(data=steps_all,aes(x=Track)) + geom_histogram() + labs(x="Subtracks per Animal")
# Chunk 17
# Chunk 18
#source jags file
source("Bayesian/MultiSpecies.R")
#prior cov shape
R <- diag(c(1,1))
data=list(argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,Month=MonthA,Months=max(MonthA,na.rm=T))
#paramters to track
pt<-c("theta","gamma","phi","alpha_mu","state")
if(newModel){
system.time(jagM<-jags.parallel(model.file = "Bayesian/Multi_RW.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=10,n.burnin=0,n.thin=2,DIC=FALSE))
}
camdf<-mdf %>% group_by(Unit,variable) %>% summarize(s=sum(value,na.rm=T)) %>% arrange(s) %>% ungroup() %>% mutate(Behavior=variable) %>% dplyr::select(-variable) %>%  dcast(...~Behavior,value.var="s") %>% arrange(All)
head(mdf)
mdf<-as.data.frame(mksp)
head(mdf)
camdf<-mdf %>% group_by(Unit,variable) %>% summarize(s=sum(value,na.rm=T)) %>% arrange(s) %>% ungroup() %>% mutate(Behavior=variable) %>% dplyr::select(-variable) %>%  dcast(...~Behavior,value.var="s") %>% arrange(All)
