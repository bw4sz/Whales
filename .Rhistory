mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
rm(ice)
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#remove minke whales
#minke<-c("131117","131118","131120","154184")
#mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("131118","121207"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
d<-crop(d,y=extent(c(-75,-50,-70,-57.5)))
#give it a geospatial layer
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
rm(ice)
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#remove minke whales
#minke<-c("131117","131118","131120","154184")
#mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("131118"),]
#121207
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
d<-crop(d,y=extent(c(-75,-50,-70,-57.5)))
#give it a geospatial layer
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=4,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
m <- get_map(location=pp,source="google",zoom=8,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
m <- get_map(location=pp,source="google",zoom=7,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset()
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y),size=1)
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
rm(ice)
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#remove minke whales
#minke<-c("131117","131118","131120","154184")
#mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
mxy<-mxy[mxy$Animal %in% c("121207"),]
#
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
d<-crop(d,y=extent(c(-75,-50,-70,-57.5)))
#give it a geospatial layer
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
#hold copy of orig
oxy<-mxy
#remake spatial object
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
#Plot
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=7,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y),size=1)
m <- get_map(location=pp,source="google",zoom=6,scale=2,maptype="satellite",color = "bw")
pp<-c(mean(mxy$x),mean(mxy$y))
m <- get_map(location=pp,source="google",zoom=5,scale=2,maptype="satellite",color = "bw")
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y),size=1)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y),size=0.7)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y),size=0.4)
ggmap(m)+geom_path(data=mxy, aes(x=x, y=y,col=as.factor(Animal)),size=.5) + scale_color_discrete(guide="none") + theme_inset() + geom_point(data=mxy, aes(x=x, y=y),size=0.1)
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(boot)
library(raster)
library(reshape2)
library(ggplot2)
library(survival)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(R2jags)
library(move)
#New model to be run, flag turned off if just updating.
newModel<-T
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
rm(ice)
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#remove minke whales
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
d<-crop(d,y=extent(c(-75,-50,-70,-57.5)))
#give it a geospatial layer
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
h2016<-mxy %>% filter(Year=="2016")
dim(h2016)
colnames(h2016)
h2016$argos.altitude
h2016$argos.error.radius
h2016$argos.lc
write.csv("C:/Users/Ben/Desktop/Humpback2016.csv")
write.csv(h2016,"C:/Users/Ben/Desktop/Humpback2016.csv")
# Chunk 1
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(raster)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(move)
library(maps)
#New model to be run, flag turned off if just updating.
newModel<-T
# Chunk 3
#memory function
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(format(utils::object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
# Chunk 4
#raster layers
#ice
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
rice<-aggregate(ice,fact=0.1/res(ice))
rm(ice)
#coast
distc<-raster("InputData/DistancetoCoast.tif")
rice[rice<0]<-NA
distc[is.na(rice)]<-NA
#read data
mdat<-read.csv("InputData/Antarctic Humpback overlap with krill fisheries -3085052751565071394.csv")
##need to look into making into a movebank object.
#name env columns
#Create a oceandepth in km
mdat$ocean<-round(mdat$ETOPO1.Elevation * -1 /1000,3)
mdat$coast<-round(mdat$NASA.Distance.to.Coast,1)
mdat$SST<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Daytime.SST
mdat$ChloroA<-mdat$MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A
#standardize column names to match the simulation
#Create an animal tag.
mxy <- as(mdat, "data.frame")
mxy$Animal<-mxy$individual.local.identifier
mxy$x<-mxy$location.long
mxy$y<-mxy$location.lat
#remove minke whales
minke<-c("131117","131118","131120","154184")
mxy<-mxy[!mxy$individual.local.identifier %in% minke,]
#grab set of animals
#mxy<-mxy[mxy$Animal %in% c("112699","121207","131151"),]
#empty coordinates
mxy<-mxy[!is.na(mxy$x),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(mxy$x,mxy$y),data=mxy,proj4string=CRS("+proj=longlat +datum=WGS84"))
d<-crop(d,y=extent(c(-75,-50,-70,-57.5)))
#give it a geospatial layer
mxy<-as.data.frame(d)
#set datestamp
mxy$timestamp<-as.POSIXct(mxy$timestamp,format="%Y-%m-%d %H:%M:%S.000")
#month and year columns
mxy$Month<-months(mxy$timestamp)
mxy$Year<-years(mxy$timestamp)
#Only austral sping and summer
mxy<-mxy[mxy$Month %in% month.name[1:7],]
#remove empty timestamps
mxy<-mxy[!is.na(mxy$timestamp),]
#remove duplicates
mxy<-mxy[!duplicated(data.frame(mxy$timestamp,mxy$Animal)),]
mxy<-mxy[!mxy$ETOPO1.Elevation>0,]
# Chunk 5
krill<-read.csv("InputData/CCAMLR_aggregated_catch_C1.csv")
ksp<-SpatialPointsDataFrame(cbind(krill$GridMidpointDegreeLon,krill$GridMidpointHalfDegreeLat),krill)
# Chunk 6
#raster
r<-raster(extent(d)*c(2,1.1),nrow=200,ncol=200)
#res(r)<-0.25
#put cellindex number
r[]<-1:ncell(r)
sxy<-split(mxy,mxy$Animal)
sxy<-lapply(sxy,function(x) {x$Index<-1:nrow(x); return(x)})
#plot(rasterize(j,r,field="Index",fun='count'))
#time in each cell
timecell<-function(j){
rlej<-rle(x=diff(j$Index))
position<-c(1,cumsum(rlej$lengths))
timestack<-c()
#if only one position
if(length(position)==1){
timestack[1]<-0
} else {
#time difference between first and last point in the cell
for(x in 2:length(position)){
timed<-j[position[x-1]:position[x],]
timestack[x-1]<-difftime(max(timed$timestamp),min(timed$timestamp),units="days")
}
}
out<-data.frame(Sum=sum(timestack))
return(out)
}
#loop through all animals
sptracks<-lapply(sxy,function(x){
k<-SpatialPointsDataFrame(cbind(x$x,x$y),data=x,proj4string=CRS("+proj=longlat +datum=WGS84"))
#get the cells that points are in
k$cellvalue<-extract(r,k)
#for each cell value, perform time function
sptrack<-as.data.frame(k) %>% group_by(Animal,cellvalue) %>% do(timecell(.))
return(sptrack)}
)
sptracks<-rbind_all(sptracks)
#get sum across animals
cellvals<-sptracks %>% group_by(cellvalue) %>% summarize(Sum=sum(Sum))
#is there a better way to loop through?
r[]<-NA
for(x in 1:nrow(cellvals)){
r[cellvals$cellvalue[x]]<-cellvals$Sum[x]
}
plot(r/length(unique(mxy$Animal)))
map(add=T)
# Chunk 7
#extract
ksp$ResidencyTime<-extract(r,y=ksp)
#write to file
ggplot(as.data.frame(ksp)) + geom_point(aes(x=ResidencyTime,y=log(C1KRIcatchKG)))  + theme_bw() + labs(x="Residency Time (Days)",y="Krill Catch (Log Metric Tons)")
ggsave("Figures/Observed.svg")
# Chunk 8
temp <- get_map(location=bbox(r),source="google",zoom=5,maptype="satellite",color = "bw",scale = 2)
#ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.9) + geom_point(data=krill,aes(x=GridMidpointDegreeLon,y=GridMidpointHalfDegreeLat,size=C1KRIcatchKG/1000)) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(1,5))
ggmap(temp) + geom_tile(data=data.frame(rasterToPoints(r)),aes(x=x, y=y,fill=layer),alpha=0.9) + scale_fill_continuous(low="blue",high="red") + labs(fill="Days", size="Krill Catch (Metric Tons)") + scale_size_continuous(range=c(1,5))
ggsave("Figures/ResidenceTime_JustTracks.jpeg",height=9,width=7)
library(ctmm)
?brownian.bridge.dyn
moved<-move(x=mxy$x,y=mxy$y,time=as.POSIXct(mxy$timestamp),proj=CRS("+proj=longlat +ellps=WGS84"),animal=mxy$Animal,data=as.data.frame(mxy),sensor=mxy$Animal,removeDuplicatedTimestamps=T)
bb<-brownian.bridge.dyn(moved)
plot(bb)
bb<-brownian.bridge.dyn(object=moved)
bb<-brownian.bridge.dyn(object=moved,r)
bb<-brownian.bridge.dyn(object=moved,raster=r)
bb<-brownian.bridge.dyn(object=moved,raster=r,location.error=0)
bb<-brownian.bridge.dyn(object=moved,raster=r)
bb<-brownian.bridge.dyn(object=moved,raster=r,location.error=1)
moved
plot(moved)
nrow(moved)
rep(nrow(moved),0)
rep(0,nrow(moved))
bb<-brownian.bridge.dyn(object=moved,raster=r,location.error=rep(0,nrow(moved)))
data2 <- spTransform(moved, CRSobj="+proj=aeqd +ellps=WGS84", center=TRUE)
bb<-brownian.bridge.dyn(object=data2,raster=r,location.error=rep(0,nrow(moved)))
plot(bb)
bb<-brownian.bridge.dyn(object=data2,raster=r,location.error=12)
r2<-projectRaster(r,data2)
r
CRS(r)
proj(r)
projection(r)
projection(r)<-CRS("+proj=longlat +ellps=WGS84")
r2<-projectRaster(r,data2)
data2
projection(r2<-projectRaster(r,data2))
r2<-projectRaster(r,"+proj=aeqd +ellps=WGS84")
r2<-projectRaster(r,CRS("+proj=aeqd +ellps=WGS84"))
CRS("+proj=aeqd +ellps=WGS84")
?projectRaster
r2<-projectRaster(from=r,crs=CRS("+proj=aeqd +ellps=WGS84"))
plot(r2)
map(add=T)
map(add=T,projection =CRS("+proj=aeqd +ellps=WGS84") )
map(add=T,projection=CRS("+proj=aeqd +ellps=WGS84") )
map(add=T,projection="+proj=aeqd +ellps=WGS84" )
?map
map(add=T,projection="aeqd" )
map(add=T,projection="azequidistant")
map(add=T,projection="azequidistant()")
map(add=T,projection="azequidistant")
map(add=T,projection="azequalarea")
r
map(projection="azequalarea")
plot(bb)
bb
r2
plot(r2)
points(moved)
points(data2)
data2
projection(r)<-CRS("+proj=longlat +ellps=WGS84 +lon_0=-63.164993285 +lat_0=-63.210998535 ")
r2<-projectRaster(from=r,crs=CRS("+proj=aeqd +ellps=WGS84"))
bb<-brownian.bridge.dyn(object=data2,raster=r,location.error=12)
projection(r)<-CRS("+proj=aeqd +ellps=WGS84 +lon_0=-63.164993285 +lat_0=-63.210998535 ")
r2<-projectRaster(from=r,crs=CRS("+proj=aeqd +ellps=WGS84"))
plot(r2)
bb<-brownian.bridge.dyn(object=data2,raster=r,location.error=12)
library(knitr)
opts_chunk$set(echo=F,warning=F,message=F,fig.width = 11,fig.height = 5,cache=F)
library(raster)
library(reshape2)
library(ggplot2)
library(MASS)
library(ggmap)
library(dplyr)
library(chron)
library(gridExtra)
library(stringr)
library(move)
library(maps)
library(ctmm)
#New model to be run, flag turned off if just updating.
newModel<-T
ice<-raster("InputData/ETOPO1_Ice_g_geotiff.tif")
ice<-round(ice*-1/1000,3)
plot(ice)
rice[rice<0]<-NA
rice<-aggregate(ice,fact=0.1/res(ice))
rice[rice<0]<-NA
plot(rice)
